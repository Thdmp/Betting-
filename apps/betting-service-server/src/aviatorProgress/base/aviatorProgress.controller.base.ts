/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AviatorProgressService } from "../aviatorProgress.service";
import { AviatorProgressCreateInput } from "./AviatorProgressCreateInput";
import { AviatorProgress } from "./AviatorProgress";
import { AviatorProgressFindManyArgs } from "./AviatorProgressFindManyArgs";
import { AviatorProgressWhereUniqueInput } from "./AviatorProgressWhereUniqueInput";
import { AviatorProgressUpdateInput } from "./AviatorProgressUpdateInput";

export class AviatorProgressControllerBase {
  constructor(protected readonly service: AviatorProgressService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AviatorProgress })
  async createAviatorProgress(
    @common.Body() data: AviatorProgressCreateInput
  ): Promise<AviatorProgress> {
    return await this.service.createAviatorProgress({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AviatorProgress] })
  @ApiNestedQuery(AviatorProgressFindManyArgs)
  async aviatorProgresses(
    @common.Req() request: Request
  ): Promise<AviatorProgress[]> {
    const args = plainToClass(AviatorProgressFindManyArgs, request.query);
    return this.service.aviatorProgresses({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AviatorProgress })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async aviatorProgress(
    @common.Param() params: AviatorProgressWhereUniqueInput
  ): Promise<AviatorProgress | null> {
    const result = await this.service.aviatorProgress({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AviatorProgress })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAviatorProgress(
    @common.Param() params: AviatorProgressWhereUniqueInput,
    @common.Body() data: AviatorProgressUpdateInput
  ): Promise<AviatorProgress | null> {
    try {
      return await this.service.updateAviatorProgress({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AviatorProgress })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAviatorProgress(
    @common.Param() params: AviatorProgressWhereUniqueInput
  ): Promise<AviatorProgress | null> {
    try {
      return await this.service.deleteAviatorProgress({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
